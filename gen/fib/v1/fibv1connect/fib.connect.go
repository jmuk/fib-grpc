// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fib/v1/fib.proto

package fibv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jmuk/fib-grpc/gen/fib/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FibServiceName is the fully-qualified name of the FibService service.
	FibServiceName = "fib.v1.FibService"
)

// FibServiceClient is a client for the fib.v1.FibService service.
type FibServiceClient interface {
	Fib(context.Context, *connect_go.Request[v1.FibRequest]) (*connect_go.Response[v1.FibResponse], error)
}

// NewFibServiceClient constructs a client for the fib.v1.FibService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFibServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FibServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fibServiceClient{
		fib: connect_go.NewClient[v1.FibRequest, v1.FibResponse](
			httpClient,
			baseURL+"/fib.v1.FibService/Fib",
			opts...,
		),
	}
}

// fibServiceClient implements FibServiceClient.
type fibServiceClient struct {
	fib *connect_go.Client[v1.FibRequest, v1.FibResponse]
}

// Fib calls fib.v1.FibService.Fib.
func (c *fibServiceClient) Fib(ctx context.Context, req *connect_go.Request[v1.FibRequest]) (*connect_go.Response[v1.FibResponse], error) {
	return c.fib.CallUnary(ctx, req)
}

// FibServiceHandler is an implementation of the fib.v1.FibService service.
type FibServiceHandler interface {
	Fib(context.Context, *connect_go.Request[v1.FibRequest]) (*connect_go.Response[v1.FibResponse], error)
}

// NewFibServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFibServiceHandler(svc FibServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/fib.v1.FibService/Fib", connect_go.NewUnaryHandler(
		"/fib.v1.FibService/Fib",
		svc.Fib,
		opts...,
	))
	return "/fib.v1.FibService/", mux
}

// UnimplementedFibServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFibServiceHandler struct{}

func (UnimplementedFibServiceHandler) Fib(context.Context, *connect_go.Request[v1.FibRequest]) (*connect_go.Response[v1.FibResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("fib.v1.FibService.Fib is not implemented"))
}
