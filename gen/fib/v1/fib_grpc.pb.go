// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: fib/v1/fib.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibServiceClient is the client API for FibService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibServiceClient interface {
	Fib(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibResponse, error)
}

type fibServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibServiceClient(cc grpc.ClientConnInterface) FibServiceClient {
	return &fibServiceClient{cc}
}

func (c *fibServiceClient) Fib(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibResponse, error) {
	out := new(FibResponse)
	err := c.cc.Invoke(ctx, "/fib.v1.FibService/Fib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibServiceServer is the server API for FibService service.
// All implementations must embed UnimplementedFibServiceServer
// for forward compatibility
type FibServiceServer interface {
	Fib(context.Context, *FibRequest) (*FibResponse, error)
	mustEmbedUnimplementedFibServiceServer()
}

// UnimplementedFibServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFibServiceServer struct {
}

func (UnimplementedFibServiceServer) Fib(context.Context, *FibRequest) (*FibResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fib not implemented")
}
func (UnimplementedFibServiceServer) mustEmbedUnimplementedFibServiceServer() {}

// UnsafeFibServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibServiceServer will
// result in compilation errors.
type UnsafeFibServiceServer interface {
	mustEmbedUnimplementedFibServiceServer()
}

func RegisterFibServiceServer(s grpc.ServiceRegistrar, srv FibServiceServer) {
	s.RegisterService(&FibService_ServiceDesc, srv)
}

func _FibService_Fib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibServiceServer).Fib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fib.v1.FibService/Fib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibServiceServer).Fib(ctx, req.(*FibRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibService_ServiceDesc is the grpc.ServiceDesc for FibService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fib.v1.FibService",
	HandlerType: (*FibServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fib",
			Handler:    _FibService_Fib_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fib/v1/fib.proto",
}
